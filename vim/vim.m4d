---
{
"title" :  "notes"
}
---

²0¹

# .vimrc, init.vim

key mappings
```vim
let mapleader = '\'
map <space> \
let maplocalleader = ','
inoremap <CR> <ESC>
```

# Introduction

`:qall!` ²q¹ `:wall`  

u C-r ²q¹ undo/redo

Special case: When the cursor is in a word, "cw" and "cW" do not
include the white space after a word, they only change up to the end
of the word.

# buffers

`:ball` *N*
`:ls` `:`*N*`b` `]b` `[b`

# commandline

C-r,C-w

```md
                                :ce
                                                                 :ri
  :le 2
```

pipe operator “|”

## substitute

`:[range]s/{pattern}/{string}/[flags]`  

When [range] and [count] are omitted, replace in the current line
only.

`:s/pattern/repl/flags`, [serch], `g&`

flags:  
c ²q¹ confirm 'y', 'l', 'n', 'a', 'q'
i I

`:s/pattern/\=<expr>/`
`:s/pattern/\=submatch(0)."a"/`

`:s/mydir/\=expand($PWD)/g`

# normal mode

x r ²q¹ delete/change char  
\<visual\>r ²q¹ <BS>

## Operators

d ²q¹ delete,  
y ²q¹ yank,  
p ²q¹ paste or put  
s ²q¹ send (nvim-send-to-term),  
m ²q¹ mark (signature),  
! ²q¹ filter with command

### c "change"

change (delete and start insert)

cc ²q¹ preserves indent

### g "go"

G gg gi gE g\_  
g gs ²q¹ (vim-swap)  
gn ²q¹ (motion)  
gf ²q¹ go to file under cursor  
gq ²q¹ format text  
gw ²q¹ format text with internal function
g= ²q¹ process with m4
gP ²q¹ paste above cursor

gp ²q¹ select last pasted text  
g~ ²q¹ switch case

## Motions

Motions move the cursor.  
[ *N* ] *motion*

```vim
nmap <c-l> W
nnoremap h gE
```

C-o C-i `` ` ``  
\%  ²s¹ `#` ²s¹  
w W e E b B  
( ) \{ \}  
0 \$ £ `^`  
f F ; , (shot-f)  
`<` `>` ²q¹ indentation

### [ and ]

unimpaired plugin

] [ ²q¹ go to line that starts with `{`   
( ) { }  
b ²q¹ buffer  
e ²q¹ exchange lines  
h ²q¹ changes  
q ²q¹ errors  
p ²q¹ paste with indent  
d ²q¹ definition  
`` ` `` - = ²q¹ mark and marker  
x ²q¹ XML encode/decode
u ²q¹ URL encode/decode
y ²q¹ c string encode/decode
<space> ²q¹ add blank lines

## registers

". ²q¹ last inserted  
"\% ²q¹ "`#` ²q¹ filename of buffer  
": ²q¹ last command  
"/ ²q¹ last serch  
"= ²q¹ expression (calculator)  
"q ²q¹ macro register

`:let @/ = "search-pattern"`

q<char> ²q¹ start recording, stop with 'q'  
@<char> ²q¹ execute  
@@ ²q¹ repeat

## windows

c-w,w c-w,r c-w,c  
c-w p  
c-w m ²q¹(zoom)  
c-w o  

# Insert mode

C-r *register*  
C-r,C-o *register*

C-t C-d ²q¹ indent

Entering Insert Mode:
i I a A gi
o O

## autocomplete

C-x,C-f ²q¹ Filenames

²q¹
# Text Objects

[ *N* ] *operator* [ *N* ] ( *motion or text-obj* )

**text-obj**:
[ i *or* a ] *object*

**object**:  
t ²q¹ xml tag block  
b ²q¹ any bracket  

```vim
onoremap <silent> iL :<c-u>normal! g_v^<cr>
onoremap <silent> aL :<c-u>normal! $v0<cr>
```

²q¹
# tags

`ctags`

c-]
c-T

]I [I

`hasktags .` ²q¹
`jsctags`

``` bash
npm install -g \
git+https://github.com/ramitos/jsctags.git
```

By default, jsctags will output a JSON file. Use the -f flag
to output an exuberant ctags-compatible file.

`:tag` *functionname-regexp*

`:ts` ²q¹
`:tl`

C-w,\}

# Plugins

habama/vim-sendtoterm (win), sjl/tslime (tmux)  
vim-bufkiller,
chrisbra/unicode.vim,

## targets

X := one of:  
( ) { } B [ ] t

Pair text objects work over multiple lines and support seeking.

In Pair [N]iX
A Pair [N]iX

Inside Pair [N]IX
exclude whitespace at both ends

Around Pair [N]AX
include whitespace at one side of the pair. Prefers to select trailing whitespace, falls back to select leading whitespace.

Next and Last Pair
in( an( In( An( il( al( Il( Al( ...

Work directly on distant pairs without moving there separately.

All the above pair text objects can be shifted to the next pair by
including the letter n. The command in) selects inside of the next
pair. Use the letter l instead to work on the previous (last) pair.
Uses a count to skip multiple pairs. Skipping works over multiple
lines.

## tabular

`:Tab \=`  
`:Tab \:/zs`

## vim-signature

m. ²q¹ new mark  
m*char* m[0-9] ²q¹ toggle mark/markers  
m m ²q¹ delete all marks/markers from the current buffer  
m/ m? ²q¹ location list  
'*mark*  
`:SignatureToggle`
`:SignatureRefresh`

## changesPlugin

chrisbra/changesPlugin

`:CL` `:CD` `:CT`

## caw

gcc gco gcO

## vim-sandwich

(sendwichrecipes)

visual block, visual line.

sa *obj* *addition* ²q¹ saiw( ²q¹ foo -> (foo)

sd *deletion* ²q¹ sdb ²q¹ (foo) -> foo

sr *deletion* *addition* ²q¹ srb" ²q¹ (foo) -> "foo"

function ²q¹ saiwf  
interactive ²q¹ saiwi  

sdifoobar ²q¹ foowordbar -> word

is as ²q¹ search for char

**tags:** saiwt

div`#`id1 -> `<div id="id1">…</div>`

div.class1 -> `<div class="class1">…</div>`

div[attr=val -> `<div attr="val">…</div>`

## emmet

mattn/emmet-vim

`,,` in insert mode

html:5

*name*>*[name*>*]* ²q¹ creates tags

div.container>p`#`foo>a

div>p ²s¹ 5

div>p`#`foo\$ ²s¹ 5

## coc

`.config/coc/ultisnips/vim.snippets`

`CocInstall marketplace`
coc-terminal

# regex

Vim's default 'magic' setting makes characters
have the same meaning as in grep, and `\v` (very magic) makes them the same as
the extended regular expressions used by egrep. Regular expressions in scripts
should always specify one of `\v,` `\m`, `\M`, or `\V,` to make them immune to
the user's 'magic' setting.

The `:substitute` command has the `:smagic` and `:snomagic` alternate forms (the same
as `\m` and `\M`), so you can search and replace with `%sno/regex/new_text/g`.

# neovim

user runtime folder:
`~/.config/nvim/`

`filetype.vim`

# win

runtime data/sandwichrecipes.vim

packadd vim-sandwich

# debug

```vim
:packadd termdebug
:Termdebug name
```

gdb window:
run
info break

# multi cursor

mg979/vim-visual-multi

c-n ²q¹ visual-multi mode
c-down, c-up
shift-arrows
n N
[ ]
q Q
i a I A
<tab> cursor / extend (visual)
