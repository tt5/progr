---
{
  "title": "notes",
  "latex": "true"
}
---

²0¹
# Functions

lambda abstraction

```hs
"looooooo\
ooooong string"
```

Function arrows associate to the right, that is, W→X→Y→Z is
equivalent to W→(X→(Y→Z)).

function composition  
`(.) f g x = f (g x)`

function application (a function)  
`(\$) (f x) = (f $ x)`

zip

iterate

lookup

`scanl ( `$⊕$` ) s0 [x,y,z] =`

`[ s0,`  
`  s0 `$⊕$` x,`  
` (s0 `$⊕$` x) `$⊕$` y,`  
`((s0 `$⊕$` x) `$⊕$` y ) `$⊕$` z ]`  

``` hs
pow2s = scanl (+) 1 pow2s
take 4 pow2s
```
m4 esyscmd(¹stack ./data/some.hs ²)


`o2s = a : scanl ( `$⊕$` ) b o2s`

``` hs
fibs = scanl (+) 1 (0 : fibs)
pells = 0 : scanl (\y z -> 2*y+z) 1 pells
```

``` hs
rotate :: Int -> [a] -> [a]
rotate = drop <> take
```

²q¹
# Types and Typeclasses

IO, (->), [], Maybe, (), IOError  
Int, Integer, Float, Double

## typeclasses

`Eq` ²q¹ eqality testing  
`Show` ²q¹ string representation  
`Read`  
`Ord` ²q¹ ordering  
`Num`  
`Bonded`  
`Enum`  
`Real`
`Fractional`
`Integral`  
`RealFract`
`Floating`  

Functor  
Monad  
MonadPlus

## list

`:`  
`[]` ²q¹ empty list  
`map` ²q¹ "fmap" for lists  
`head` ²q¹ `tail`  
`last` ²q¹ `init`  
`length`  
`null`  
`reverse`  
`drop` *int*  
`elem` *element*  
`take` *int* `(cycle` *list*`)`  
`replicate` *int* *list*  
`!!` ²q¹ index  

## tuples

`(1, "two")`

`fst`\quad `snd`

`(,,) <$> "1" <*> "2" <*> "3"`

---
# Category

In Haskell, we define a category by specifying the hom-set as a type. Then we
define the composition of morphisms and pick the identity morphisms.

# Functor

A given type has at most one valid instance of Functor.

functor laws:

1. `fmap id = id`  
2. `fmap (g . h) = (fmap g) . (fmap h)`

1) implies 2)

`<$>`

```
fmap (+3) [1,2]
fmap (:[]) [1,2]
```

applicative:  
`[(*2),(+3)] <*> [1,2,3]`  
liftA

[] (list constructor)  
Maybe  
Either  
((,) e)  
((->) e)  
IO  

A monoidal functor is a homomorphism of monoidal categories.

# applicative

monoidal functor

```
ZipList
[(:[1]),(:[2]),(:[3])] <*> [3,4,5]
```

# Monoid

`mempty`\q Identity  
`mappend`\q binary function  
`mconcat`\q folds the mappend function between the elements of an array of
Monoids  

```
mempty `mappend` x = x
x `mappend` mempty = x
(x `mappend` y) `mappend` z = `mappend` (x `mappend` z)
```

# monad

A monad is a way to abstract a control-flow effect, so that users write a
series of pure functions sequences between the effect points of their program.

`(>>=)`\q bind
LiftM

`x >>= y = join (fmap y x)`

Identity  
Cont  
State  
Stream  
Option  
Future  

\minisec{examples}

```
> [1,2,3] >>= \x -> [x, x*1000]
[1,1000,2,2000,3,3000]
```

```
maybeHead :: [a] -> Maybe a
maybeHead (x:xs) = Just x
maybeHead _ = Nothing

> xs = Just [1,2,3]
> xs >>= maybeHead
Just 1

first = maybeHead ([1,2,3] :: [Int])
  case first of
    (Just x) -> Just (x*10)
> Just 10

result = 
    Just 0        >>= \x ->
    Just (x + 1)  >>= \x ->
    Just (x * 3)  >>= \x ->
    Just (show x) >>= \x ->
    Just ("And the answer is " <> x)

result = do 
    x <- Just 0
    x <- Just (x + 1)
    x <- Just (x * 3)
    x <- Just (show x)
    Just ("And the answer is " <> x)
```

You don’t need to have an `x <-` for any of the lines, although you won’t be able
to reference previous values if you don’t.

If we wanted to, we could use pure instead of Just. As long as we use Just at
least once, Haskell will know we want the output of our do expression to be a
Maybe value, so it will call the version of pure that returns a Maybe.

By the way, reusing previous names in do expressions is called shadowing and it
is generally considered bad practice.  Note that if any of these evaluate to
Nothing, the whole thing will evaluate to Nothing.

\minisec{laws}

The first law is that pure x `>>=` f should be equivalent to f x. Remember, pure
just wraps a value up in some other type, like Maybe. Then `>>=` unwraps it and
passes it to f. Together, they undo each other.

The second law is that m `>>=` pure should be equivalent to m. This is because
`>>=` is responsible for unwrapping m and passing it to the function on the right
(in this case pure). Then pure wraps it right back up. This means they should
undo each other the other way, too.

The third law is that `(m >>= f) >>= g` should be equivalent to m `>>= (\x -> f x
>>= g).` What it’s basically saying is that monads should be associative - the
parentheses shouldn’t really matter


## free monad

```
liftFree :: Functor f => f a -> Free f a  -- "into" the monad
foldFree :: Functor f => (f r -> r) -> Free f r -> r  -- "get out" of the monad
```

## IO

`print`  
`getLine`\q takes no arguments and gets user input  
`putStrLn`\q takes a string and prints it  
`readFile`\q takes a string (a filename) and returns that file's contents  

`sequence`\q takes a list of IO actions and return an IO action that executes
all of them.

we can chain IO a actions together with `>>`  
`helloWorldDouble = putStrLn "helloworld1" >> putStrLn "helloworld2"`

`helloWorldDouble = putStrLn "helloworld1" >>= (\_ -> putStrLn "helloworld2")`  
`beLoud = getLine >>= (\x -> putStrLn (x <> "!!"))`

Notice that even though getLine returns an IO String, the x is just a regular
String. The bind operator “unwraps” it.

```
spongebob =
    putStrLn "Are you ready, kids?" >>= \_ -> (
    getLine                         >>= \_ -> (
    putStrLn "I can't hear you!"    >>= \_ -> (
    getLine                         >>= \_ -> (
    putStrLn "Ohhhhh!"))))
```

```
spongebob = do
    putStrLn "Are you ready, kids?"
    getLine
    putStrLn "I can't hear you!"
    getLine
    putStrLn "Ohhhhh!"
```

```
spongebob =
    putStrLn "Are you ready, kids?" >>= \_ ->
    getLine                         >>= \first ->
    putStrLn "I can't hear you!"    >>= \_ ->
    getLine                         >>= \second ->
    putStrLn "Ohhhhh!"              >>= \_ ->
    putStrLn ("Results: You said '" <> first <> "' the first time, and '" <> second <> "' the second time")
```

```
spongebob = do
    putStrLn "Are you ready, kids?"
    first <- getLine
    putStrLn "I can't hear you!"
    second <- getLine
    putStrLn "Ohhhhh!"
    putStrLn ("Results: You said '" <> first <> "' the first time, and '" <> second <> "' the second time")
```

```
spongebob = do
    _      <- putStrLn "Are you ready, kids?"
    first  <- getLine
    _      <- putStrLn "I can't hear you!"
    second <- getLine
    _      <- putStrLn "Ohhhhh!"
    putStrLn ("Results: You said '" <> first <> "' the first time, and '" <> second <> "' the second time")
```

Note that when using do notation, if the first element is type IO a, every other element has to be some other IO type.

```
willWork = do
    putStrLn "hello"
    two <- pure ((1 + 1) :: Int)
    putStrLn . show $ two

willWork = let two = (1 + 1) in do
    putStrLn "hello"
    putStrLn . show $ two
```

do-notation

-    insert the word do  
-    turn >>= into <-  
-    delete ->  
-    delete \  
-    swap each side of <-  

you can write local definitions in the middle:

```
do x <- getLine
   let x1 = x ++ x
       x2 = take 10 x1
   putStrLn x2
```

This represents:

```
getLine >>= \x -> let {x1 = x ++ x; x2 = take 10 x1}
```

you are not restricted to  
variable <- action  
you are allowed the general  
pattern <- action

## Reader / function / environment monad

I a cartesian closed category / type theory $C$, the reader monad $[,-]:C \to
C$ is right adjoint to the writer comonad $W \times (-)$.  Just as the writer
monad is cannonically a monad when $W$ is a monoid, so the reader monad is a
comonad in that case, and then it is sometimes called the traced comonad.  The
composition of writer comonad followed by reader monad is the state monad.

# Syntax

`data`\q type constructor (parametrized type)

```
newtype <Type Name> = <Data Constructor Name> <Data Constructor Input Type>
```

record syntax  
type alias


\minisec{Sections}
There is a special syntax for partial application on infix operators.
Essentially, you only give one of the arguments to the infix operator, and it
represents a function which intuitively takes an argument and puts it on the
"missing" side of the infix operator.

`(2^)`\q (left section) is equivalent to `(^) 2`, or more verbosely `\x -> 2 ^ x`

`(^2)`\q (right section) is equivalent to flip `(^) 2`, or more verbosely `\x ->
x ^ 2`

Note: as an exception, the "-" (subtraction) operator cannot do a right
section, because that would be interpreted as unary negation in Haskell syntax.
The Prelude function "subtract" is provided for this purpose. Instead of (- e),
you need to write (subtract e).  Note: Iterated sections are also possible, as
long the associativity is correct: (1+2+).

# Either

`either fR fL someEither`

# heap

Prelude Data.Heap> Data.Heap.fromList [1,2,5,7] :: MinHeap Int
fromList [(1,()),(2,()),(5,()),(7,())]

Other constructors e.g. singleton, fromAscList, etc. operate similarly.

Once you've constructed the heap, the rest are easy, e.g. to insert an item to a heap

Prelude Data.Heap> let heap = Data.Heap.fromList [1,2,5,7] :: MinHeap Int
Prelude Data.Heap> heap
fromList [(1,()),(2,()),(5,()),(7,())]
Prelude Data.Heap> Data.Heap.insert 3 heap
fromList [(1,()),(3,()),(2,()),(5,()),(7,())]

To read the top of the heap

Prelude Data.Heap> heap
fromList [(1,()),(2,()),(5,()),(7,())]
Prelude Data.Heap> viewHead heap
Just 1

# mental model

**expression reduction** mode:  
A program is a collection of expreasions.
A entire program is regarded as a single expression.
The subexpression is evaluated (reduced) in some order.
The evaluation is performed by replacement.

## lazy evaluation

(pure is order free)

evaluate only when needed +
evalueate only enough +
evaluate at most once

An expression is evaluated by normal order (leftmost outermost redex first)

To postpone the evaluation, an unevaluated expression is built
in the heap memory.

Pattern-matching or forcing request drive the evaluation.

## Expression and value

An expression denotes a value
An expression is evaluated to a value

There are many evaluation approaches

There are some evaluation levels

NF (Normal Form): no redexes at all

WHNF (Weak Head Normal Form): no top-level redexes, 
top-level (head) is a constructor or a lambda abstraction

Expression categories:

lambda abstraction
let expression
conditional
case expr
do expr
function application
general constructor, literal and some forms (7, [1,2,3], (1,2), 'a', x:xs, Just 5)
variable

Specification is described in Haskell 2010 Language Report

Classification by values:

Expressions: unevaluated | values

values: data values | function values | bottom

values: ( WHNF ( HNF ( NF ) ) )

( "\x -> abs 1" ( "\x -> x + (abs 1)", "Jst (f x)" "[f x, g y]" ( "7", "[1,2,3]", "\x -> x" )

## Internal representation of expressions

Constructor:

A constructor builds a structured data value
A constructor distiguishes the data value in expressions
Constructors are defined by data declaration

Thunk:

A thunk is an unevaluated expr in heap memory.
A thunk is built to postpone the evaluation.

let, case expression:

A let expr may build a thunk. A case expression evaluates (forces) and
deconstructs the thunk.

```hs
let x = Just 5
let x = \y -> y + z
let x = take y ys
```

a case expr evaluates a subexpr, and performs case analysis

(1) Pattern-matching drives the evaluation.
(2) select alternative expression with result value

```hs
case x of
  Just _ -> True
  Nothing -> False
```

pattern-matching in function definition

```hs
f Just _ = True
f Nothing = False
```
desugar:
```hs
f x case x of
  Just _ -> True
  Nothing -> False
```

## Evaluation

The evaluation produces a value from an expression

Order:

**apply first**:
lazy evaluation, call-by-name, call-by-need, outermost reduction, normal order reduction

**argument first**:
eager evaluation,
call-by-value,
innermost reduction,
application order reduction

(1) example
```
tail (map abs [1, -2, 3])
```
(2) how to postpone the evaluation of args?
(3) GHC internally translates the expr
(4) A let expr builds a thunk
```
let thunk0 = map abs [1, -2, 3]
in tail thunk0
```
(5) function apply to arg
(6) tail function is defined here
```
tail (_:xs)=xs
```
(7) functions's pattern is syntactic sugar
```
tail y = case y of
  (_:xs) -> xs
```
(8) substitute the function body (beta reduction)
```
case thunk0 of
  (_:xs) -> xs
```
(9) case pattern-matching drives the evaluation
(10) but, stop at WHNF
```
case (abs 1):(map abs [-2, 3]) of
  (_:xs) -> xs
```
(11) bind variables to a result
(12) return the value
```
map abs [-2, 3]
```

(1) Evaluation by pattern-matching

There are two kinds of pattern-matching.

Strict patterns drive the evalution

```hs
case ds of
  x:xs -> f x xy
  [] -> False
```
```hs
f Just _ = True
f Nothing = False
```

Lazy patterns postpone the evaluation.

```hs
let (x:xs) = fun args
```
irrefutable patterns
```hs
f ~(Just _) = True
f ~(Nothing) = False
```

(2) Evaluation by primitive operation

primitive (built-in) operation
```hs
f x y = x + y
```

(3) Evaluation by strict version function
(4) Evaluation by forcing function
`seq x y`
(5) Eval by special syntax

Bang pattern:
arguments are evaluated before function application
```hs
{-# LANGUAGE BangPatterns #-}

f !xs = g xs
```

Strictness flag:
args are evaluated before constructor application
```hs
data Pair = Pair !a !b
```

(6) Eval by special pragma
(7) Eval by compile option
`ghc -O` Turn on optimization, imply `-fstrictness`

---

STG-machine:
efficientyl performs lazy graph reduction.
Associates directly lampda calculus and physical machine.

STG-dump shows whish expr is built as thunks.

`$ ghc -O -ddump-stg file.hs`

# Semantics

## Bottom

A well formed expr should have a value.

A non-terminating expression:
infinite loop or partial function

evaluates to bottom (a value)

bottom is "an undefined value" or "a non-terminating value"

```hs
undefined :: a
```

##

"Non-strict" means that the expr may or may not be evaluated.
"Strict" means that the expr is definitely evaluated.

GHC implements non-strict semantics by lazy evaluation.
There are multiple levels of strict.
A function places "strictness demands" on each of its args.

Strictness of a func can be defined with the association between
input and output.
"Given a non-terminating arg, the function will terminate?"

Strict function's output is bottom when input is bottom.
Given a non-terminating argumtents, strict function will not terminate.

Non-strict function's output is not bottom when input is bottom.
given a non-terminating arguments, non-strict function will terminate.

## Lifted and boxed types

Lifted types include bottom (Bool, Int, Char, Maybe, List, …).
Unlifted types do not include bottom (Int#, Char#, Addr#, Array#, ByteArray#, …).

Boxed types are represented as a pointer.
Unboxed types are represented other than a pointer (can't be lifted, can't be postboned, no polymorphism)

Identifier's `#` customarily means "primitive" rahter than "unboxed" or "unlifted".
Kind's `#` means "unlifted".

##

Strictness analysis analyzes whether a function is sure to evaluate its args.

`$ ghc -O -ddump-strsigs file.hs`  
`S` "head-Strict", `L` "lazy"
`$ ghc -O -ddump-stranal file.hs`  

Strictness analysis are used to avoid the thunk.
If GHC knows that a function is strict, arguments is evaluated before application.

## Sequential Order

`seq` function only guarantee that it is strict in both arguments.
This semantic property makes no operational guarantee about order of evaluation.
`pseq` makes operational quarantee about order of evaluation.
